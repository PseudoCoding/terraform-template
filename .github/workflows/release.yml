name: 'Automated Release'

on:
  push:
    branches: [ "main" ]
    paths: [ "CHANGELOG.md" ]

permissions:
  contents: write
  pull-requests: read

jobs:
  check-version:
    name: 'Check for New Version'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_exists: ${{ steps.tag_check.outputs.exists }}
      release_notes: ${{ steps.extract.outputs.release_notes }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract Latest Version from Changelog
      id: version
      run: |
        # Extract the first version number from CHANGELOG.md (after [Unreleased])
        VERSION=$(grep -E "^## \[([0-9]+\.[0-9]+\.[0-9]+)\]" CHANGELOG.md | head -1 | sed -E 's/^## \[([0-9]+\.[0-9]+\.[0-9]+)\].*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION"

    - name: Check if Tag Exists
      id: tag_check
      run: |
        if git tag -l | grep -q "^v${{ steps.version.outputs.version }}$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} does not exist"
        fi

    - name: Extract Release Notes
      id: extract
      if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.version != ''
      run: |
        # Extract release notes for the latest version
        python3 << 'EOF'
        import re
        import sys
        
        with open('CHANGELOG.md', 'r') as f:
            content = f.read()
        
        # Find the latest version section (first one after [Unreleased])
        pattern = r'## \[(\d+\.\d+\.\d+)\] - (\d{4}-\d{2}-\d{2})(.*?)(?=## \[|\Z)'
        matches = re.findall(pattern, content, re.DOTALL)
        
        if matches:
            version, date, notes = matches[0]
            # Clean up the notes
            notes = notes.strip()
            
            # Write to output file for GitHub Actions
            with open('release_notes.txt', 'w') as f:
                f.write(f"# Release {version}\n\n")
                f.write(f"Released on {date}\n\n")
                f.write(notes)
            
            print(f"Extracted release notes for version {version}")
        else:
            print("No version found in changelog")
            sys.exit(1)
        EOF

    - name: Upload Release Notes
      if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.version != ''
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.txt

  create-release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version != '' && needs.check-version.outputs.tag_exists == 'false'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Release Notes
      uses: actions/download-artifact@v4
      with:
        name: release-notes

    - name: Create Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ needs.check-version.outputs.version }}" -m "Release v${{ needs.check-version.outputs.version }}"
        git push origin "v${{ needs.check-version.outputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.check-version.outputs.version }}"
        name: "Release v${{ needs.check-version.outputs.version }}"
        body_path: release_notes.txt
        draft: false
        prerelease: false
        generate_release_notes: true

  notify-release:
    name: 'Notify Release Created'
    runs-on: ubuntu-latest
    needs: [check-version, create-release]
    if: success()
    
    steps:
    - name: Post Release Summary
      run: |
        echo "🎉 Successfully created release v${{ needs.check-version.outputs.version }}"
        echo "📝 Release notes extracted from CHANGELOG.md"
        echo "🏷️ Git tag created and pushed"
        echo "📦 GitHub release published"